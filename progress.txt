client
==================================

1. update 








server
=================================
1. integrate jwt tokens with server
2. login, signup, google
3. add tables and relationship and association
4. add test cases and code coverage
5. validation for all the models and others things
6. dotenv setup for the server


==========================

1. update the model 
2. update the css 
3. seed the models with huge data
4. docker setup
5. github actions for different environment
6. different environment setup
7. logging setup (winston) ✅
8. redis setup ✅
9. mongodb connection and setup ✅
10. autocanon ✅
11. differrent types of testing
12. adding coverage for both backend and frontend 
13. adding validation everywhere where it is required
14. adding different types of authentication and authorization
15. adding protected routes and roles based access 
16. different types of attacks (sql injection, xss attacks) to prevent the attacks 
17. nginx
18. rate limiters
19. sql optimization (n + 1) and all other related issues
20. worker thread in nodejs (express app) to enable more feature ✅
21. ssl certificates 
22. adding bots
23. adding machine learning models
24. learning more about build tools and how it works
25. learning different types of headers, caching, sessions, tokens, localstorage, sessionbased storage





=======================

autocannon -d 10 -c 100 http://localhost:3000/
1. Before using multi thread :
Running 10s test @ http://localhost:5000
100 connections


┌─────────┬───────┬───────┬───────┬────────┬─────────┬───────────┬─────────┐
│ Stat    │ 2.5%  │ 50%   │ 97.5% │ 99%    │ Avg     │ Stdev     │ Max     │
├─────────┼───────┼───────┼───────┼────────┼─────────┼───────────┼─────────┤
│ Latency │ 39 ms │ 48 ms │ 91 ms │ 253 ms │ 64.3 ms │ 131.47 ms │ 1624 ms │
└─────────┴───────┴───────┴───────┴────────┴─────────┴───────────┴─────────┘
┌───────────┬─────┬──────┬────────┬────────┬─────────┬────────┬────────┐
│ Stat      │ 1%  │ 2.5% │ 50%    │ 97.5%  │ Avg     │ Stdev  │ Min    │
├───────────┼─────┼──────┼────────┼────────┼─────────┼────────┼────────┤
│ Req/Sec   │ 0   │ 0    │ 1,608  │ 2,123  │ 1,448.7 │ 669.65 │ 718    │
├───────────┼─────┼──────┼────────┼────────┼─────────┼────────┼────────┤
│ Bytes/Sec │ 0 B │ 0 B  │ 669 kB │ 882 kB │ 602 kB  │ 278 kB │ 298 kB │
└───────────┴─────┴──────┴────────┴────────┴─────────┴────────┴────────┘

Req/Bytes counts sampled once per second.
# of samples: 10

15k requests in 10.08s, 6.02 MB read

15k requests in 10.08s, 6.02 MB read
2. After using multi thread : 
Running 10s test @ http://localhost:5000
100 connections


┌─────────┬──────┬──────┬────────┬────────┬──────────┬──────────┬────────┐
│ Stat    │ 2.5% │ 50%  │ 97.5%  │ 99%    │ Avg      │ Stdev    │ Max    │
├─────────┼──────┼──────┼────────┼────────┼──────────┼──────────┼────────┤
│ Latency │ 1 ms │ 4 ms │ 156 ms │ 214 ms │ 40.28 ms │ 55.09 ms │ 332 ms │
└─────────┴──────┴──────┴────────┴────────┴──────────┴──────────┴────────┘
┌───────────┬────────┬────────┬────────┬─────────┬─────────┬────────┬────────┐
│ Stat      │ 1%     │ 2.5%   │ 50%    │ 97.5%   │ Avg     │ Stdev  │ Min    │
├───────────┼────────┼────────┼────────┼─────────┼─────────┼────────┼────────┤
│ Req/Sec   │ 1,320  │ 1,320  │ 2,239  │ 3,259   │ 2,447.9 │ 579.08 │ 1,320  │
├───────────┼────────┼────────┼────────┼─────────┼─────────┼────────┼────────┤
│ Bytes/Sec │ 549 kB │ 549 kB │ 930 kB │ 1.35 MB │ 1.02 MB │ 241 kB │ 549 kB │
└───────────┴────────┴────────┴────────┴─────────┴─────────┴────────┴────────┘

Req/Bytes counts sampled once per second.
# of samples: 10

25k requests in 10.05s, 10.2 MB read

